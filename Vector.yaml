id: vector
name: Vector
subtitle: Vector and Transformation Types  
ordering:
    - 2D Vector
    - Transformation
functions:
#---------------------------------
# vec2
#--------------------------------- 
- category: type
  description: This type represents a 2D vector. Most mathematical operators such
    as equality, addition, subtraction, multiplication and division are provided,
    so you can use `vec2` data types similarly to how you use numerical types.
    In addition there are a number of methods, such as `v:dot( vec2 )` that
    can be called on vec2 types, please see the related items below.
  examples:
  - example: |
      --Some vector operations
      v1 = vec2( 1, 1 )
      v2 = vec2( 4, 2 )

      --Angle between
      v1:angleBetween( v2 )

      --Adding
      v3 = v1 + v2

      --Multiplying
      v4 = v1 * 5.0

      --Rotating by 45 degrees
      v5 = v1:rotate(math.rad(45))
  group: 2D Vector
  id: vec2
  name: vec2
  parameters:
  - description: float, the x component of this vec2
    name: x
  - description: float, the y component of this vec2
    name: y
  related:
  - vec2.dot
  - vec2.normalize
  - vec2.dist
  - vec2.distSqr
  - vec2.len
  - vec2.lenSqr
  - vec2.cross
  - vec2.rotate
  - vec2.rotate90
  - vec2.angleBetween
  syntax: |
    vec2.x
    vec2.y

    myVec = vec2( 2.5, 10.0 )

    -- Supports operators:
    --   v = vec2 + vec2
    --   v = vec2 - vec2
    --   v = vec2 * scalar
    --   v = vec2 / scalar
    --   v = -vec2
    --   b = vec2 == vec2
    --   print( vec2 )
#---------------------------------
      
#---------------------------------
# vec2.dot
#---------------------------------       
- category: method
  description: This method returns the scalar dot product between two `vec2`
    types
  group: 2D Vector
  id: vec2.dot
  name: vec2.dot( v )
  parameters:
  - description: compute the dot product with this vec2 and v
    name: v
  related:
  - vec2
  returns: Dot product between this `vec2` and `v`
  syntax: |
    v1 = vec2( 1, 1 )
    x = v1:dot( v )
#---------------------------------
      
#---------------------------------
# vec2.normalize
#---------------------------------             
- category: method
  description: This method returns a normalized version of the vector
  group: 2D Vector
  id: vec2.normalize
  name: vec2.normalize()
  related:
  - vec2
  returns: Normalized version of this `vec2`
  syntax: | 
    v1 = vec2( 5, 5 )
    v1 = v1:normalize()
#---------------------------------
      
#---------------------------------
# vec2.dist
#---------------------------------             
- category: method
  description: This method returns the distance between two `vec2` types
  group: 2D Vector
  id: vec2.dist
  name: vec2.dist( v )
  parameters:
  - description: compute the distance between this vec2 and v
    name: v
  related:
  - vec2
  returns: Distance between this `vec2` and `v`
  syntax: |
    v1 = vec2( 1, 1 )
    x = v1:dist( vec2(2, 2) )
#---------------------------------
      
#---------------------------------
# vec2.distSqr
#---------------------------------             
- category: method
  description: This method returns the squared distance between two `vec2`
    types
  group: 2D Vector
  id: vec2.distSqr
  name: vec2.distSqr( v )
  parameters:
  - description: compute the squared distance between this vec2 and v
    name: v
  related:
  - vec2
  returns: Squared distance between this `vec2` and `v`
  syntax: |
    v1 = vec2( 1, 1 )
    x = v1:distSqr( vec2(2, 2) )
#---------------------------------
      
#---------------------------------
# vec2.len
#---------------------------------             
- category: method
  description: This method returns the length of a `vec2`
  group: 2D Vector
  id: vec2.len
  name: vec2.len()
  related:
  - vec2
  returns: Length of this `vec2`
  syntax: | 
    v1 = vec2( 2, 1 )
    x = v1:len()
#---------------------------------
      
#---------------------------------
# vec2.lenSqr
#---------------------------------             
- category: method
  description: This method returns the squared length of a `vec2`
  group: 2D Vector
  id: vec2.lenSqr
  name: vec2.lenSqr()
  related:
  - vec2
  returns: Squared length of this `vec2`
  syntax: |
    v1 = vec2( 2, 1 )
    x = v1:lenSqr()
#---------------------------------
      
#---------------------------------
# vec2.cross
#---------------------------------             
- category: method
  description: This method returns the cross product between two `vec2` types
  group: 2D Vector
  id: vec2.cross
  name: vec2.cross( v )
  parameters:
  - description: compute the cross product of this vec2 and v
    name: v
  related:
  - vec2
  returns: Cross product of this `vec2` and `v`
  syntax: |
    v1 = vec2( 1, 1 )
    v2 = v1:cross( vec2(2, 2) )
#---------------------------------
      
#---------------------------------
# vec2.rotate
#---------------------------------             
- category: method
  description: This method returns a rotated copy of a `vec2` type. The `angle`
    is assumed to be radians.
  group: 2D Vector
  id: vec2.rotate
  name: vec2.rotate( angle )
  parameters:
  - description: float, rotate this vector by `angle` in radians
    name: angle
  related:
  - vec2
  returns: Rotated version of this `vec2`
  syntax: |
    v1 = vec2( 1, 1 )
    v1 = v1:rotate( math.rad(45) )
#---------------------------------
      
#---------------------------------
# vec2.rotate90
#---------------------------------             
- category: method
  description: This method returns a copy of a `vec2` type, rotated 90 degrees.
  group: 2D Vector
  id: vec2.rotate90
  name: vec2.rotate90()
  related:
  - vec2
  returns: Rotated version of this `vec2`
  syntax: |
    v1 = vec2( 1, 1 )
    v1 = v1:rotate90()
#---------------------------------
      
#---------------------------------
# vec2.angleBetween
#---------------------------------             
- category: method
  description: This method returns the angle between this `vec2` and `v`
    in radians.
  group: 2D Vector
  id: vec2.angleBetween
  name: vec2.angleBetween( v )
  parameters:
  - description: compute the angle between this `vec2` and `v`
    name: v
  related:
  - vec2
  returns: Angle between `vec2` and `v` in radians
  syntax: |
    v1 = vec2( 1, 1 )
    angle = math.deg( v1:angleBetween( vec2(5, 2) ) )
#---------------------------------
      
      
#---------------------------------
# transformation
#---------------------------------                   
- category: type
  description: >
    This type represents transformations in LuaCanvas, and can be used with functions
    such as `modelTransformation()`. The transformation type supports
    the following arithmetic operators: multiplication (between two matrices), multiplication
    by scalar, division by scalar, equality, and element-wise addition and subtraction.
    

    Because this type is used to represent transformations it also provides a number of
    3D transformation methods such as `transformation:translate(x,y,z)`, `transformation:rotate(angle,x,y,z)`.
    See the related items for a full list.
    

    Constructing a transformation with
    no parameters returns the identity transformation. Passing 6 numbers when constructing
    a transformation will assign those values to the elements of the transformation. Individual
    transformation elements can be accessed by their index, for example `m[1]` for
    the first element and `m[6]` for the last element. Entries are defined
    such that the x,y,z translation components are stored in elements 13, 14, and
    15 respectively.
  examples:
  - example: |
      transformation[x] = y
      m1 = transformation( 1,2,3, ... ,6 )
      m2 = transformation( 4,5,6, ... ,9 )
      
      -- Supports operators:
      m = m1 * m2        
      m = m1 + m2
      m = m1 - m2
      m = m1 * 10
      m = m1 / 10
      m = -m1
      
      checkEqual = m1 == m2
      
      print( m1 )
  group: Transformation
  id: transformation
  name: transformation
  parameters:
  - description: float, an element of the transformation
    name: element
  related:
  - modelTransformation
  - transformation.rotate
  - transformation.translate
  - transformation.scale
  - transformation.inverse
  returns: A new transformation with the given elements
  syntax: |
    transformation[1] ... transformation[16]
    m = transformation()
    m = transformation(1, 2, 3, ... 16)
    m = transformation1 * transformation2
#---------------------------------
      
#---------------------------------
# transformation.rotate
#---------------------------------       
- category: method
  description: This method returns the transformation multiplied by a rotation transformation defining
    a rotation of angle degrees around the x,y,z axis or (0,0,1) if no axis is given.
  examples:
  - example: |
      m = transformation()
      
      --Rotate about 0,0,1
      rotated = m:rotate(30)

      --Rotate by a given axis
      rotated= m:rotate(30, 1, 0, 0)
  group: Transformation
  id: transformation.rotate
  name: transformation.rotate( m, r, x, y, z )
  parameters:
  - description: float, the rotation in degrees
    name: angle
  - description: float, the x component of the axis of rotation
    name: axisX
  - description: float, the y component of the axis of rotation
    name: axisY
  - description: float, the z component of the axis of rotation
    name: axisZ
  related:
  - transformation
  returns: A transformation which rotates m by the specified rotation
  syntax: rotated = m:rotate( angle, axisX, axisY, axisZ )
#---------------------------------
      
#---------------------------------
# transformation.translate
#---------------------------------     
- category: method
  description: This method returns the transformation multiplied by a translation transformation
    defining a translation of x, y, z.
  examples:
  - example: |
      m = transformation()
      translated = m:translate(100,20,10)
  group: Transformation
  id: transformation.translate
  name: transformation.translate( m, x, y, z )
  parameters:
  - description: float, the x component of translation
    name: x
  - description: float, the y component of translation
    name: y
  - description: float, optional (defaults to 0) the z component of translation"
    name: z
  related:
  - transformation
  returns: A transformation which translates m by the specified amount
  syntax: translated = m:translate( x, y, z )
#---------------------------------
      
#---------------------------------
# transformation.scale
#---------------------------------     
- category: method
  description: This method returns the transformation scaled by a translation transformation defining
    a scaling to each axis.
  examples:
  - example: |
      m = transformation()
      s = m:scale(100,20,10)
      
      --Uniform scaling
      s = m:scale(5)
  group: Transformation
  id: transformation.scale
  name: transformation.scale( m, x, y, z )
  parameters:
  - description: float, the x component of scale, or the uniform scale if no other
      components are given
    name: x
  - description: float, optional, the y component of scale
    name: y
  - description: "float, optional, defaults to 1 if x and y are both given, otherwise   x \u2013 the z component of scale"
    name: z
  related:
  - transformation
  returns: A transformation which scales m by the specified amount
  syntax: scaled = m:scale( x, y, z )
#---------------------------------
      
#---------------------------------
# transformation.inverse
#---------------------------------     
- category: method
  description: This method returns the inverse of the given transformation, if such an inverse
    exists. If no inverse exists, the result is a transformation of NaN values. The inverse
    of a transformation is a transformation such that m * mInv = I, where I is the identity transformation.
  group: Transformation
  id: transformation.inverse
  name: transformation.inverse( m )
  parameters:
  - description: the transformation to invert
    name: m
  related:
  - transformation
  returns: A transformation which inverts m
  syntax: inv = m:inverse()
#---------------------------------
